#Invsee 是名称，可以自定义
#Need ess
invsee:
  item:
    material: CHEST
    slot: 1
    name: '&3&lInvSee'
    lore:
      - '&3&l open %player_name% inventory'
  #The 变量 player、other 和 event 可用
  #the 脚本分别是触发播放器，
  #the 交互式播放器，以及触发此脚本的事件。
  script: |
    player.closeInventory()
    player.performCommand("invsee ${other.name}")
    player.sendMessage('已打开对方玩家的背包')
  isAsynchronous: false
#ItemTrad
itr:
  item:
    material: GRASS
    slot: 1
    name: '&3&lSend item trade request'
    lore:
      - '&3&lSend item trade request to %player name%'
      - '&a&l[Click to send!]'
  script: |
    player.closeInventory()
    player.performCommand("itr ${other.name}")
  isAsynchronous: false
#setFly
setFly:
  item:
    material: ELYTRA
    slot: 1
    name: '&3&lSet %player_name% Fly status'
    lore:
      - '&a&lClick the switch %player_name% flight status'
  script: |
    player.closeInventory()
    player.performCommand("fly ${other.name}")
#Need ess
giveMoney:
  item:
    material: GOLD_INGOT
    slot: 1
    name: '&3&lGive money'
    lore:
      - '&e&lClick and enter the price in the input box!'
  script: |
    import org.bukkit.Bukkit
    import org.bukkit.event.Event
    import org.bukkit.event.EventException
    import org.bukkit.event.EventPriority
    import org.bukkit.event.Listener
    import org.bukkit.event.player.AsyncPlayerChatEvent
    import org.bukkit.plugin.EventExecutor
    import org.bukkit.scheduler.BukkitRunnable
    import org.bukkit.metadata.FixedMetadataValue
    
    def plugin = Bukkit.getPluginManager().getPlugin('PlayerInteract')
    //防止重复点击的内容↓
    //用entity内的metaData,有想过用权限的可是我脑子不够,总觉得临时权限要是没有去掉之后一段时间内都没办法点击了。。。
    //判断数据
    if (player.hasMetadata("waitInputPay")){
        for (final def v in player.getMetadata("waitInputPay")) {
            if (v.owningPlugin == plugin) {
                if (v as Boolean) {
                    player.sendMessage("§6§lPlease click on [You can enter non-numbers directly to finish] after the payment is finished.")
                    player.closeInventory()
                    return
                }
            }
        }
    }
    //给上数据
    player.setMetadata("waitInputPay",new FixedMetadataValue(plugin,true))
    //防止重复点击的内容↑
    
    
    //初始化一些东西
    //定期删除侦听器
    def i = 60
    //监听器对象
    def listener = new Listener() {}
    //要定时的任务
    def runnable = new BukkitRunnable() {
        @Override
        void run() {
            if (player != null) {
                player.sendMessage("§c§lPayment timed out!")
            }
            AsyncPlayerChatEvent.class.getHandlerList().unregister(listener)
            //删除数据
            player.removeMetadata("waitInputPay",plugin)
        }
    }
    //执行的内容
    def executor = new EventExecutor() {
        @Override
        void execute(Listener l,Event event) throws EventException {
            def e = event as AsyncPlayerChatEvent
            if (e.player != player) {
                return
            }
            e.cancelled = true;
            try {
                def value = Integer.parseInt(e.message)
                player.performCommand("pay ${other.getName()} ${value}")
            } catch (NumberFormatException ignored) {
                e.player.sendMessage("§6§lThe input is not a number!")
            }
            //Register listener and runnable
            AsyncPlayerChatEvent.getHandlerList().unregister(listener)
            runnable.cancel()
            //删除数据
            player.removeMetadata("waitInputPay",plugin)
        }
    }
    //注册侦听器
    plugin.getServer().getPluginManager().registerEvent(AsyncPlayerChatEvent.class, listener, EventPriority.NORMAL, executor, plugin)
    player.sendMessage("§6§lPlease enter the value to be paid!")
    player.closeInventory()
    //Start a scheduled task
    runnable.runTaskLater(plugin, i * 20);